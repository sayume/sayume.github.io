---
layout: post
title:  "简单聊一聊服务端的API层架构"
date:   2015-07-25
categories: jekyll update
---

上个星期和某同事聊天，某同事用了“越来越前端”来形容他当前的状态，这引起了我的一点点思考。某同事主要工作在公司的API层，“越来越前端”这个词来形容
API层，确实是有那么几分传神的味道。

首先，“越来越前端”并不是指什么API层和前端的联系越来越紧密，恰恰相反，现在的前端和后端API的耦合更松，前端会自己处理自己的业务逻辑和展现逻辑
，已经有一定程度侵入到了后端的传统领域，这一点暂时不表。现在的API层基本上就是所有服务端的前端，对于后端服务端的作用来说，起着标准化，服务化
各种后端功能的作用。

最近恰好看到了CSDN上德一篇文章描述linkedin最近十年的系统架构变迁[Linkedin架构这十年]，里面描述的linkedin现在的架构和我们公司最近在jsconf
上发表的服务端架构有异曲同工之妙（很遗憾文章链接没找到），看来从服务端发展的方向来说，这是大势所趋。

大体上来讲，一个复杂的大型系统基本上分为这么三层：第一层是服务层，基本上就是一个个完成一项功能的独立的模块，这是公司在发展过程中一步一步积累
起来，时间上有老有新，技术上也有新有旧，甚至有些系统的功能还有一部分重叠，虽然统一技术统一架构的服务是每一个程序员的梦想，然而现实告诉我们这
永远只能是梦想，在一个存活时间稍长一点的公司里同时运行着由上个世纪的古董技术开发的系统以及和由全新技术开发的系统，这并不是什么稀奇的事情。第
二层就是所谓的展现层，或者说是交互层，也就是和人打交道的Interface。这一层既有各种各样的业务逻辑，也有各种各样的展现逻辑，变化迅速，因为新
需求嘛，总是从产品经理那里滚滚而来。理论上，前端模块和服务层模块是可以直接打交道的，某流行语言的低级使用形态下就是这么做的。然而这里面有一个
可怕的多对多的问题，那就是一个前端功能可能引用了数个后端模块，而一个后端模块可能同时被数个前端模块所使用，一旦你修改了任何一个后端功能模块，
那么与之相关联的所有前端模块都要被修改，一旦这个系统变大，那么它将不可维护，更别提后端模块很多时候并非是平级的，他们有可能有着很
微妙的依赖关系。维护上的高难度基本上杀死了前端模块和服务端模块直接联系的可能性，所以才有了类似于API层这样的中间层，将复杂的前后端多对多转变为
相对简单的一对多。

API层到底是个什么东东？简单说来，API层就是把一个个后端模块按照一定的业务逻辑包装起来，然后按照某种协议（主要是HTTP）提供给前端使用。后端的
协议相对固定，而前端的需求一直变化，基本上API层就像组装工厂一样，把一个个不同工厂生产出来的模块组装各种形状的砖块，然后再用这种砖块盖成一座
座造型不同的房子，API层就好比是工厂的流水生产线。但是，在软件工程的世界里，生产模块的工厂并不像现实世界里是全部集中在一起的，而是分散的，分布式
的，要想组装出一个完整的部件，并不是把所有部件全部送到一处，而是先把邮递到一个工厂装上一个部件，然后再邮递到另一个工厂装上一个部件，最后再
统一打包交给前端。但是这里面有一个严重的问题，那就是上一家工厂必须要知道下一家工厂的地址，甚至是作息时间，翻译过来就是上层服务必须要知道下层
服务的状态，下层服务的任何状态更新都必须广播到上层服务，而同时上层服务又必须要维护下层服务的状态，以确保数据能正确送达，这种状态的依赖关系极大
地增加了系统的复杂性，同时也提高了系统的维护成本。要解耦这种依赖关系，就必须要保证各个服务是无状态的。那么系统就需要要有像快递公司一样的功能
模块，由它专门负责消息的分发，维护服务器状态，就像是快递公司一样，它有各个配件公司的地址，能够正确把部件投递过去，同时万一某个配件公司搬了家，
只要把新的地址告诉快递公司就好了。通过消息队列，zookeeper等技术，我们不难实现这么一个功能模块。这样，API层的内容就很清晰了，消息队列，接口
以及协议（http），这些就是API层的主要内容。

除了这些主要内容，还有一些更加有价值的内容必须依附于API层。首先是log记录，虽然各个服务端模块有自己的log系统，但是API层的log能够整体反映整个
系统的运行状态，显得意义更为重大。其次是数据收集系统，在如今这个大数据时代，其重要意义更是不言而喻。

最近经常看到关于nodejs技术应用场景的讨论，已经与go以及java等等技术是否有替代性之类的问题。我现在所在的公司是少数几个在生产环境中大规模使用
nodejs的公司之一，在nodejs方面已经有了非常丰富的实战经验。以我的观点看来，API层是最适合nodejs的应用场景之一。首先API层的主要工作是处理请求，
而高性能的处理请求是nodejs的一大优势，同时，API层并不会做复杂的业务逻辑处理，复杂的业务处理都交给服务层，这一点又规避了javascript语言的语言
缺陷。npm丰富的资源以及node强大的社区力量，使得nodejs能够处理各种各样的场景，这恰恰是API层的一大特性，因为API层需要连接各种各样的系统，而
这些系统可能是由不同的语言写成的，不像其他语言，只有在本语言内部具有很高的泛用性，这种灵活性正是nodejs所独有。经常有人把nodejs看做是服务端
的通用语言，并由此攻击nodejs的性能，单线程以及垃圾回收等等问题，这是对于nodejs的误解。在我看来，服务端并不存在什么通用语言，最多只有场合语言，
因为服务端的应用场景本身就是多种多样的，单纯的一种技术很难覆盖所有的应用场景。而服务端的目的也不是做“最好”的服务，而是做资源最优化配置的服务，
或者说资源最优化配置的服务才是“最好”的服务，这就是为什么有些看起来很烂的架构，看起来效率很差的语言在今天仍然有不小的用武之地，单纯追求快和好
并不应该是一个后端架构师的目标。

[Linkedin架构这十年]:   http://colobu.com/2015/07/24/brief-history-scaling-linkedin/

